# For initial release

[x] Implement pan with the holding down the middle button
[x] Implement zoom with the scroll wheel
[x] Sync pan with mouse cursor
[x] Fix text positioning with resize
[x] Zoom to geometry
[x] Label points
[x] Load simple obj files
[x] Drag and drop
[x] Show loaded polylines
[x] Implement remove button
[x] Colour picker for polylines
[x] Draw points
[x] l cycles through line styles
[x] Draw polyline soups
[ ] Support polyline soups general obj polyline files
[ ] Distribution stuff, how to make this a single executable? statically link?
[ ] Support polygons and polygon soups, and do convex decomposition for rendering
[ ] Write * to indicate an identical first and last point
[ ] Mode line showing the style info etc
[ ] Load from command line?
[ ] Custom key-bindings and sensitivity of parameters, dynamically generate UI for this? and save to the text file

# For present and explain version

[ ] Understand and use context
  [ ] Understand and use logging
  [ ] Understand and use assertions
  [ ] Understand and use allocaters
[ ] Build system stuff: build_debug and build_release

# minor version

[ ] Give each polyline a number 1-9 then pressing that number before some modifier for colour/vertex etc only modifies that one, number 0 means everything?
[ ] Optionally mesh the inside of the polyline
[ ] Alternate segment colours (two draw calls?)
[ ] Auto pick distinct colours
[ ] Toggle fullscreen/maximise
[ ] Some kind of ui cooldown for removing files? So that you don't loose track of what's being deleted
[ ] If file is hovered in the list then make it flash to white and back, and draw it lastt 
[ ] Make orbitting/rotatoin work based on the relation between the cursor position and the CoM of the visible shape? or orbit location

# minor version

[ ] Dont distort geometry in non-square viewports
[ ] Zoom to origin
[ ] Show grid lines and label
[ ] Move polylines
[ ] Boost polygon bindings and a nice way to play around with the functions in a scripting way
[ ] Transparent imgui window so UI is like Fusion?
[ ] Compiled at time in Window, after version?
[ ] Distribute shaders with source for hot loading/editing them. Pass them lots of unused data then

# fixes

[ ] Fix orbit/rotation location when many files are loaded but some aren't visible
[ ] Cleanup buffer_ids in openGL?


Present & Explain
-----------------

Provide the source code to follow along
Make a proper debug/release build for llvm
Practice explaining the compile loop
Mention that searching with <ident> :: is easy
Make a quick demo program with the syntax for basic things, but not trivial things:
  AxisBox and Polyline types
Demo with size of types, which store constants
Demo iterators on polylines, segment iterator, point iterator etc, stuff from boost geometry
Demo something with testing, maybe have a build target for that?
Demo tests using @test, make it work like the @PrintLike thing. You don't need to register them anywhere

Make sure you can explain the context stuff, including logging and allocation

If you've ever played his games, there are many ideas in them and they're all coupled and consistent. The game is kinda about exploring all the interactions

do not read the JaiPrimer



Questions
Is there a const concept?
Can you debug at compile time ie while running bytecode?



Put this on github, and then make a github io page

Very different philosophy RE how to program, everything very simple. Makes *some* things inconvenient, but no the hard things e.g.,
- initialising things is a bit annoying, you need to declare+init right now. 
- operator overloading limited, so longer function names, and simple imports/namespaces (no adl) mean sometimes annoying to use